sakuya_	70.0612%
izayoi	71.3673%

remilia	70.9388%

# model: sakuya 	70.6327%
check_nltk = ["NN", "CD"]
check_Twitter = ["Noun"]

getTokn = lambda name : list(set([token[0] for token in t.pos(name)]))
getNoun = lambda name : list(set([token[0] for token in t.pos(name) if token[1] in check_Twitter]))
def getName(name):
    brac = bracTokenize(name)
    return " ".join([" ".join(getTokn(bra)) for bra in brac] + [" ".join(getNoun(brac[0]))])

# model: sakuya
check_nltk = ["NN", "CD"]
check_Twitter = ["Noun", "Alpha", "Number"]

getTokn = lambda name : list(set([token[0] for token in t.pos(name)]))
getNoun = lambda name : list(set([token[0] for token in t.pos(name) if token[1]]))
getName = lambda name : " ".join([" ".join(getTokn(bracTokenize(name)[0])), " ".join(getTokn(bracTokenize(name)[1]))])


# model: sakuya__	71.1020%
check_nltk = ["NN", "CD"]
check_Twitter = ["Noun"]

getTokn = lambda name : list(set([token[0] for token in t.pos(name)]))
getNoun = lambda name : list(set([token[0] for token in t.pos(name) if token[1] in check_Twitter]))
getName = lambda name : " ".join([" ".join(getTokn(bracTokenize(name)[0])), " ".join(getTokn(bracTokenize(name)[1]))])

# model: sakuya___	71.1429
check_nltk = ["NN", "CD"]
check_Twitter = ["Noun", "Alpha", "Number"]

getTokn = lambda name : list(set([token[0] for token in t.pos(name)]))
getNoun = lambda name : list(set([token[0] for token in t.pos(name) if token[1] in check_Twitter]))
getName = lambda name : " ".join([" ".join(getTokn(bracTokenize(name)[0])), " ".join(getTokn(bracTokenize(name)[1]))])

# model: izayoi_ 	61.3469
gram_cnt = 2
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Alpha"]

getTokn = lambda name : [token[0] for token in t.pos(name)]
getNoun = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
    brac = bracTokenize(name)
    noun = getNoun(brac[0], chk_NAN) + getNoun(brac[1], ["Alpha"])
    gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
    return " ".join(gram)

# model izayoi__	70.3469
gram_cnt = 1
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Alpha"]

getTokn = lambda name : list(set([token[0] for token in t.pos(name)]))
getNoun = lambda name, chk : list(set([token[0] for token in t.pos(name) if token[1] in chk]))
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = bracTokenize(name)
	noun = getNoun(brac[0], chk_NAN) + getNoun(brac[1], chk_NA)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(gram)

# model jiun	69.9592
gram_cnt = 1
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = bracTokenize(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NA, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(gram)

# model 배지운 
gram_cnt = 1
chk_N = ["NN"]
chk_NC = ["NN", "CD"]
chk_N = ["Noun"]
chk_NN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = bracTokenize(name)
	noun = getTokn(brac[0], chk_NN, chk_NC) + getTokn(brac[1], chk_NN, chk_NC)
	gram = getGram(list(set(noun)), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(gram)

# model remilia 	71.3469
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NA, chk_NC)
	gram = getGram(getTokn(brac[0], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(gram + list(set(noun)))

# model remilia_ 
gram_cnt = 3
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NA, chk_NC)
	gram = getGram(getTokn(brac[0], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(gram + list(set(noun)))

# model remilia__
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NA, chk_NC)
	gram = getGram(getTokn(brac[0], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(gram + list(set(noun)))

# model scarlet		70.5918
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NA, chk_NC)
	gram = getGram(getTokn(brac[0], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(noun + gram[:len(gram)/2])

# model scarlet_	71.4898
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NA, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(noun + gram)

# model aria 	69.7347
gram_cnt = 3
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name)]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(getTokn(brac[0] + brac[1], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(noun + gram)

# model aria_	70.2449
gram_cnt = 3
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(getTokn(brac[0], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(noun + gram)

# model aria__ 	71.0612
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha" and pos_tag([token[0]])[0][1][:2] in chk_en) or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(getTokn(brac[0], chk_NAN, chk_NC), min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(noun + gram)

# fit C value 0.10525110563171459
# model touhou 	0.721224489796
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun)) + list(set(gram)))

# model touhou_	72.1837
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun)) + list(set(gram)))

# model thouhou_fix	
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun + getTokn(brac[0], chk_NAN, chk_NC))) + list(set(gram)))

# model thouhou_NA
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun)) + list(set(gram)))


# model thouhou__ 	72.1633
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun + gram)))


# model OOParts
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun)) + list(set(gram)))

from classify_image_module import getImageJson
def getImge(name):
    return getImageJson(name)

# model Maybe 72.0816
gram_cnt = 2
chk_NC = ["NN", "CD"]
chk_NA = ["Noun"]
chk_NAN = ["Noun", "Number"]

getNLTK = lambda name, chk : [token[0] for token in pos_tag(name) if token[1][:2] in chk]
getKONL = lambda name, chk : [token[0] for token in t.pos(name) if token[1] in chk]
getTokn = lambda name, chk_ko, chk_en : [token[0] for token in t.pos(name) if (token[1] == "Alpha") or token[1] in chk_ko]
getGram = lambda name, cnt : [" ".join(["".join(grams)]) for grams in ngrams(name, cnt)]
def getName(name):
	brac = getBrac(name)
	noun = getTokn(brac[0], chk_NAN, chk_NC) + getTokn(brac[1], chk_NAN, chk_NC)
	gram = getGram(noun, min(gram_cnt, max(len(noun)-1, 1)))
	return " ".join(list(set(noun)) + list(set(gram)))
